// Code generated by hertz generator.

package video

import (
	"context"
	"tiktokrpc/cmd/api/biz/pack"
	"tiktokrpc/cmd/api/biz/service"

	"github.com/cloudwego/hertz/pkg/app"
	"tiktokrpc/cmd/api/biz/model/video"
)

// Feed .
// @router /video/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(video.FeedResponse)

	resp, err = service.NewVideoService(ctx, c).Feed(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// Upload .
// @router /video/publish [POST]
func Upload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.UploadRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	videoData, err := c.FormFile("videodata")
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(video.UploadResponse)

	resp, err = service.NewVideoService(ctx, c).Upload(videoData, &req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// UploadList .
// @router /video/list [GET]
func UploadList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.UploadListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(video.UploadListResponse)

	resp, err = service.NewVideoService(ctx, c).UploadList(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// Rank .
// @router /video/popular [GET]
func Rank(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.RankRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(video.RankResponse)

	resp, err = service.NewVideoService(ctx, c).Rank(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// Query .
// @router /video/search [POST]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.QueryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(video.QueryResponse)

	resp, err = service.NewVideoService(ctx, c).Query(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}
