// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "tiktokrpc/kitex_gen/user"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newUserServiceRegisterArgs,
		newUserServiceRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newUserServiceLoginArgs,
		newUserServiceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Info": kitex.NewMethodInfo(
		infoHandler,
		newUserServiceInfoArgs,
		newUserServiceInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"NameToInfo": kitex.NewMethodInfo(
		nameToInfoHandler,
		newUserServiceNameToInfoArgs,
		newUserServiceNameToInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Upload": kitex.NewMethodInfo(
		uploadHandler,
		newUserServiceUploadArgs,
		newUserServiceUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MFAGet": kitex.NewMethodInfo(
		mFAGetHandler,
		newUserServiceMFAGetArgs,
		newUserServiceMFAGetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MFA": kitex.NewMethodInfo(
		mFAHandler,
		newUserServiceMFAArgs,
		newUserServiceMFAResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MFAStatus": kitex.NewMethodInfo(
		mFAStatusHandler,
		newUserServiceMFAStatusArgs,
		newUserServiceMFAStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadImages": kitex.NewMethodInfo(
		uploadImagesHandler,
		newUserServiceUploadImagesArgs,
		newUserServiceUploadImagesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchImages": kitex.NewMethodInfo(
		searchImagesHandler,
		newUserServiceSearchImagesArgs,
		newUserServiceSearchImagesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceInfoArgs)
	realResult := result.(*user.UserServiceInfoResult)
	success, err := handler.(user.UserService).Info(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInfoArgs() interface{} {
	return user.NewUserServiceInfoArgs()
}

func newUserServiceInfoResult() interface{} {
	return user.NewUserServiceInfoResult()
}

func nameToInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceNameToInfoArgs)
	realResult := result.(*user.UserServiceNameToInfoResult)
	success, err := handler.(user.UserService).NameToInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceNameToInfoArgs() interface{} {
	return user.NewUserServiceNameToInfoArgs()
}

func newUserServiceNameToInfoResult() interface{} {
	return user.NewUserServiceNameToInfoResult()
}

func uploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUploadArgs)
	realResult := result.(*user.UserServiceUploadResult)
	success, err := handler.(user.UserService).Upload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUploadArgs() interface{} {
	return user.NewUserServiceUploadArgs()
}

func newUserServiceUploadResult() interface{} {
	return user.NewUserServiceUploadResult()
}

func mFAGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMFAGetArgs)
	realResult := result.(*user.UserServiceMFAGetResult)
	success, err := handler.(user.UserService).MFAGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMFAGetArgs() interface{} {
	return user.NewUserServiceMFAGetArgs()
}

func newUserServiceMFAGetResult() interface{} {
	return user.NewUserServiceMFAGetResult()
}

func mFAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMFAArgs)
	realResult := result.(*user.UserServiceMFAResult)
	success, err := handler.(user.UserService).MFA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMFAArgs() interface{} {
	return user.NewUserServiceMFAArgs()
}

func newUserServiceMFAResult() interface{} {
	return user.NewUserServiceMFAResult()
}

func mFAStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMFAStatusArgs)
	realResult := result.(*user.UserServiceMFAStatusResult)
	success, err := handler.(user.UserService).MFAStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMFAStatusArgs() interface{} {
	return user.NewUserServiceMFAStatusArgs()
}

func newUserServiceMFAStatusResult() interface{} {
	return user.NewUserServiceMFAStatusResult()
}

func uploadImagesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUploadImagesArgs)
	realResult := result.(*user.UserServiceUploadImagesResult)
	success, err := handler.(user.UserService).UploadImages(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUploadImagesArgs() interface{} {
	return user.NewUserServiceUploadImagesArgs()
}

func newUserServiceUploadImagesResult() interface{} {
	return user.NewUserServiceUploadImagesResult()
}

func searchImagesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceSearchImagesArgs)
	realResult := result.(*user.UserServiceSearchImagesResult)
	success, err := handler.(user.UserService).SearchImages(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSearchImagesArgs() interface{} {
	return user.NewUserServiceSearchImagesArgs()
}

func newUserServiceSearchImagesResult() interface{} {
	return user.NewUserServiceSearchImagesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Req = req
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Req = req
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, req *user.InfoRequest) (r *user.InfoResponse, err error) {
	var _args user.UserServiceInfoArgs
	_args.Req = req
	var _result user.UserServiceInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NameToInfo(ctx context.Context, req *user.NameToInfoRequest) (r *user.NameToInfoResponse, err error) {
	var _args user.UserServiceNameToInfoArgs
	_args.Req = req
	var _result user.UserServiceNameToInfoResult
	if err = p.c.Call(ctx, "NameToInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Upload(ctx context.Context, req *user.UploadRequest) (r *user.UploadResponse, err error) {
	var _args user.UserServiceUploadArgs
	_args.Req = req
	var _result user.UserServiceUploadResult
	if err = p.c.Call(ctx, "Upload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MFAGet(ctx context.Context, req *user.MFAGetRequest) (r *user.MFAGetResponse, err error) {
	var _args user.UserServiceMFAGetArgs
	_args.Req = req
	var _result user.UserServiceMFAGetResult
	if err = p.c.Call(ctx, "MFAGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MFA(ctx context.Context, req *user.MFABindRequest) (r *user.MFABindResponse, err error) {
	var _args user.UserServiceMFAArgs
	_args.Req = req
	var _result user.UserServiceMFAResult
	if err = p.c.Call(ctx, "MFA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MFAStatus(ctx context.Context, req *user.MFAStatusRequest) (r *user.MFAStatusResponse, err error) {
	var _args user.UserServiceMFAStatusArgs
	_args.Req = req
	var _result user.UserServiceMFAStatusResult
	if err = p.c.Call(ctx, "MFAStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadImages(ctx context.Context, req *user.UploadImagesRequest) (r *user.UploadImagesResponse, err error) {
	var _args user.UserServiceUploadImagesArgs
	_args.Req = req
	var _result user.UserServiceUploadImagesResult
	if err = p.c.Call(ctx, "UploadImages", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchImages(ctx context.Context, req *user.SearchImagesRequest) (r *user.SearchImagesResponse, err error) {
	var _args user.UserServiceSearchImagesArgs
	_args.Req = req
	var _result user.UserServiceSearchImagesResult
	if err = p.c.Call(ctx, "SearchImages", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
