// Code generated by Kitex v0.9.1. DO NOT EDIT.

package socialservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	social "tiktokrpc/kitex_gen/social"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Star": kitex.NewMethodInfo(
		starHandler,
		newSocialServiceStarArgs,
		newSocialServiceStarResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StarList": kitex.NewMethodInfo(
		starListHandler,
		newSocialServiceStarListArgs,
		newSocialServiceStarListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FanList": kitex.NewMethodInfo(
		fanListHandler,
		newSocialServiceFanListArgs,
		newSocialServiceFanListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FriendList": kitex.NewMethodInfo(
		friendListHandler,
		newSocialServiceFriendListArgs,
		newSocialServiceFriendListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	socialServiceServiceInfo                = NewServiceInfo()
	socialServiceServiceInfoForClient       = NewServiceInfoForClient()
	socialServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return socialServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return socialServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return socialServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "socialService"
	handlerType := (*social.SocialService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "social",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func starHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceStarArgs)
	realResult := result.(*social.SocialServiceStarResult)
	success, err := handler.(social.SocialService).Star(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceStarArgs() interface{} {
	return social.NewSocialServiceStarArgs()
}

func newSocialServiceStarResult() interface{} {
	return social.NewSocialServiceStarResult()
}

func starListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceStarListArgs)
	realResult := result.(*social.SocialServiceStarListResult)
	success, err := handler.(social.SocialService).StarList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceStarListArgs() interface{} {
	return social.NewSocialServiceStarListArgs()
}

func newSocialServiceStarListResult() interface{} {
	return social.NewSocialServiceStarListResult()
}

func fanListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceFanListArgs)
	realResult := result.(*social.SocialServiceFanListResult)
	success, err := handler.(social.SocialService).FanList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceFanListArgs() interface{} {
	return social.NewSocialServiceFanListArgs()
}

func newSocialServiceFanListResult() interface{} {
	return social.NewSocialServiceFanListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceFriendListArgs)
	realResult := result.(*social.SocialServiceFriendListResult)
	success, err := handler.(social.SocialService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceFriendListArgs() interface{} {
	return social.NewSocialServiceFriendListArgs()
}

func newSocialServiceFriendListResult() interface{} {
	return social.NewSocialServiceFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Star(ctx context.Context, req *social.StarRequest) (r *social.StarResponse, err error) {
	var _args social.SocialServiceStarArgs
	_args.Req = req
	var _result social.SocialServiceStarResult
	if err = p.c.Call(ctx, "Star", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StarList(ctx context.Context, req *social.StarListRequest) (r *social.StarListResponse, err error) {
	var _args social.SocialServiceStarListArgs
	_args.Req = req
	var _result social.SocialServiceStarListResult
	if err = p.c.Call(ctx, "StarList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FanList(ctx context.Context, req *social.FanListRequest) (r *social.FanListResponse, err error) {
	var _args social.SocialServiceFanListArgs
	_args.Req = req
	var _result social.SocialServiceFanListResult
	if err = p.c.Call(ctx, "FanList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *social.FriendListRequest) (r *social.FriendListResponse, err error) {
	var _args social.SocialServiceFriendListArgs
	_args.Req = req
	var _result social.SocialServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
