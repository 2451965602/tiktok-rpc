// Code generated by Kitex v0.9.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "tiktokrpc/kitex_gen/video"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Feed": kitex.NewMethodInfo(
		feedHandler,
		newVideoServiceFeedArgs,
		newVideoServiceFeedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Upload": kitex.NewMethodInfo(
		uploadHandler,
		newVideoServiceUploadArgs,
		newVideoServiceUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadList": kitex.NewMethodInfo(
		uploadListHandler,
		newVideoServiceUploadListArgs,
		newVideoServiceUploadListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Rank": kitex.NewMethodInfo(
		rankHandler,
		newVideoServiceRankArgs,
		newVideoServiceRankResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Query": kitex.NewMethodInfo(
		queryHandler,
		newVideoServiceQueryArgs,
		newVideoServiceQueryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedArgs)
	realResult := result.(*video.VideoServiceFeedResult)
	success, err := handler.(video.VideoService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return video.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return video.NewVideoServiceFeedResult()
}

func uploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUploadArgs)
	realResult := result.(*video.VideoServiceUploadResult)
	success, err := handler.(video.VideoService).Upload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUploadArgs() interface{} {
	return video.NewVideoServiceUploadArgs()
}

func newVideoServiceUploadResult() interface{} {
	return video.NewVideoServiceUploadResult()
}

func uploadListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUploadListArgs)
	realResult := result.(*video.VideoServiceUploadListResult)
	success, err := handler.(video.VideoService).UploadList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUploadListArgs() interface{} {
	return video.NewVideoServiceUploadListArgs()
}

func newVideoServiceUploadListResult() interface{} {
	return video.NewVideoServiceUploadListResult()
}

func rankHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceRankArgs)
	realResult := result.(*video.VideoServiceRankResult)
	success, err := handler.(video.VideoService).Rank(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceRankArgs() interface{} {
	return video.NewVideoServiceRankArgs()
}

func newVideoServiceRankResult() interface{} {
	return video.NewVideoServiceRankResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceQueryArgs)
	realResult := result.(*video.VideoServiceQueryResult)
	success, err := handler.(video.VideoService).Query(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceQueryArgs() interface{} {
	return video.NewVideoServiceQueryArgs()
}

func newVideoServiceQueryResult() interface{} {
	return video.NewVideoServiceQueryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceFeedArgs
	_args.Req = req
	var _result video.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Upload(ctx context.Context, req *video.UploadRequest) (r *video.UploadResponse, err error) {
	var _args video.VideoServiceUploadArgs
	_args.Req = req
	var _result video.VideoServiceUploadResult
	if err = p.c.Call(ctx, "Upload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadList(ctx context.Context, req *video.UploadListRequest) (r *video.UploadListResponse, err error) {
	var _args video.VideoServiceUploadListArgs
	_args.Req = req
	var _result video.VideoServiceUploadListResult
	if err = p.c.Call(ctx, "UploadList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Rank(ctx context.Context, req *video.RankRequest) (r *video.RankResponse, err error) {
	var _args video.VideoServiceRankArgs
	_args.Req = req
	var _result video.VideoServiceRankResult
	if err = p.c.Call(ctx, "Rank", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Query(ctx context.Context, req *video.QueryRequest) (r *video.QueryResponse, err error) {
	var _args video.VideoServiceQueryArgs
	_args.Req = req
	var _result video.VideoServiceQueryResult
	if err = p.c.Call(ctx, "Query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
